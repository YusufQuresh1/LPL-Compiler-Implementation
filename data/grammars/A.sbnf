-- this grammar is for a restricted language without functions or arrays

tokens {
    SKIP: "((//.*(\r?\n))|\s)+" -- DO NOT MODIFY (simple comments and whitespace)
    LSQBR: "\["
    RSQBR: "\]"
    DOT: "\."
    LBR: "\("
    RBR: "\)"
    LCBR: "\{"
    RCBR: "\}"
    SEMIC: ";"
    COMMA: ","
    BEGIN: "begin"
    END: "end"
    LOCAL: "local"
    NEW: "new"
    LENGTH: "length"
    PRINTLN: "println"
    PRINT: "print"
    PRINTCH: "printch"
    NEWLINE: "newline"
    ASSIGN: ":="
    WHILE: "while"
    IF: "if"
    ELSE: "else"
    RETURN: "return"
    -- keywords reserved for future language extensions:
    -- "printstr", ""switch", "case", "default"
    SWITCH: "switch"
    CASE: "case"
    DEFAULT: "default"
    PRINTSTR: "printstr"
    MUL: "\*"
    DIV: "/"
    ADD: "\+"
    SUB: "-"
    EQ: "=="
    LT: "<"
    LE: "<="
    NOT: "!"
    AND: "&&"
    OR: "\|\|"
    -- string literals are not used in the current grammar but are included
    -- here for future language extensions
    STRINGLIT: ""[^\\"\n]*("|\\([^\n][^\\"\n]*\\)*[^\n][^\\"\n]*")"
    -- an identifier is a non-empty sequence of letters, digits, underscores,
    -- and dollar signs, but cannot start with a digit or a dollar sign and
    -- cannot be just a single underscore
    ID: "(_[a-zA-Z_0-9$]+)|([a-zA-Z][a-zA-Z_0-9$]*)"
    INTLIT: "[0-9]+"
}

Program -> BEGIN Stm* END

Stm -> ID ASSIGN Exp SEMIC -- assignment to a variable
Stm -> IF LBR Exp RBR Stm ELSE Stm -- if-statement
Stm -> WHILE LBR Exp RBR Stm -- while-loop
Stm -> PRINT Exp SEMIC -- output decimal (no newline)
Stm -> PRINTLN Exp SEMIC -- output decimal (with newline)
Stm -> PRINTCH Exp SEMIC -- output character
Stm -> NEWLINE SEMIC -- output newline
Stm -> LCBR Stm* RCBR -- block

Exp -> SimpleExp OperatorClause

OperatorClause -> Operator SimpleExp
OperatorClause ->

SimpleExp -> ID -- variable
SimpleExp -> INTLIT -- integer literal
SimpleExp -> LBR Exp RBR -- bracketed expression
SimpleExp -> NOT SimpleExp -- logical negation

Operator -> MUL
Operator -> DIV
Operator -> SUB
Operator -> ADD
Operator -> LT
Operator -> LE
Operator -> EQ
Operator -> AND
Operator -> OR
